---
title: "Lernende im Kanton Zürich"
author: ""
format:
  html:
    embed-resources: true
editor: visual
execute:
  warning: false
editor_options: 
  chunk_output_type: console
---

## R-Pakete laden

```{r}
library(readr)
library(dplyr)
library(ggplot2)
library(ggthemes)
```

## Daten importieren

### Daten

Titel: Übersicht über alle Lernenden im Kanton Zürich ab 2000

Die Übersicht zeigt alle Lernenden im Kanton Zürich, nach Schulstufen und nach Schultypen. Studierende der Tertiärstufe 5A (Hochschulen) sind nicht enthalten. Die Daten werden jährlich für den Stichtag 15.9. erhoben.

Die Daten können über folgenden Link im Datenkatalog aufgerufen werden: [https://www.zh.ch/de/politik-staat/statistik-daten/datenkatalog.html#/datasets/524\@bildungsstatistik-kanton-zuerich](https://www.zh.ch/de/politik-staat/statistik-daten/datenkatalog.html#/datasets/524@bildungsstatistik-kanton-zuerich){.uri}

```{r}
# Die Daten werden hier direkt von der URL gelesen. Bei einem Update der Daten
# wird hier immer auf die aktuellste Version zugegriffen.
link <- "https://www.web.statistik.zh.ch/ogd/data/bista/ZH_Uebersicht_alle_Lernende.csv"

# Hier wird nun das Objekt "link" genutzt um die CSV zu lesen
lernende_in <- read_csv(file = link)

```

## Aufgabe 1: Daten erkunden

1.  Nutze die dir bekannten Funktionen um die Daten zu erkunden.

2.  Wieviele Spalten hat der Datensatz?

3.  Wieviele Zeilen hat der Datensatz?

4.  Nutze die Funktion `glimpse(lernende_in)` und beschreibe die Variablen Typen

-   Numerisch oder nicht numerisch?
-   Falls numerisch, diskret oder kontinuierlich?
-   Falls nicht numerisch, ordinal oder nicht ordinal?

```{r}

```

## Aufgabe 2: Daten transformieren

1.  Die Spalte `Geschlecht` enthält die Werte `2`, `F`, `M`, `f`, und `m`.

-   Nutze `filter()` um die Zeilen mit dem Wert `2` zu entfernen
-   Nutze `mutate()` und `case_when()` um die Werte `F`, `M`, `f` und `m` in `weiblich` und `männlich` umzuwandeln.

2.  Die Spalten `Traegerschaft` und `Finanzierung` enthalten die Werte `oef` und `priv`.

-   Nutze `mutate()` und `case_when()` um die Werte `oef` und `priv` in `öffentlich` und `privat` umzuwandeln.

3.  Speicher die transformierten Daten in einem neuen Dataframe `lernende` mittels des Zuweisungsoperators `<-`.

4.  Falls keine Fehler auftauchen wenn du den Code laufen lässt, mache einen Commit mit der Commit-Nachricht: "Daten transformieren"

```{r}

```

## Aufgabe 3: Daten eingrenzen

1.  Nutze `lernende` und filtere die Daten so, dass nur die Zeilen für das zuletzt verfügbare Jahr im Datensatz verbleiben.

2.  Speicher das Ergebnis in einem neuen Dataframe `lernende_max` mittels des Zuweisungsoperators `<-`.

```{r}

```

## Aufgabe 4: Daten zusammenfassen

1.  Gruppiere `lernende_max` nach `Stufe` und `Staatsangehoerigkeit` und berechne die Summe der Lernenden pro Gruppe (Häufigkeitstabelle).

2.  Berechne die Prozentwerte der Lernenden pro Gruppe.

3.  Speicher das Ergebnis in einem neuen Daten-Objekt `lernende_max_stufe_staat_sum` mittels des Zuweisungsoperators `<-`.

4.  Falls keine Fehler auftauchen wenn du den Code laufen lässt, mache einen Commit mit der Commit-Nachricht: "Daten zusammenfassen"

```{r}

```

## Aufgabe 5: Daten visualisieren

1.  Versuche den Plot aus der Beschreibung für die Zusatzaufgabe mittels des Daten-Objekts `lernende_max_stufe_staat_sum` zu rekonstruieren.

2.  Sobald du mit deinem Diagramm zufrieden bist, machen einen Commit mit der Commit-Nachricht: "Plot rekonstruieren"

```{r}

```

## Aufgabe 6: Eigene Erkundungen machen (**Bonus**)

Der Datensatz hat noch spannende weitere Variablen. Welche zusätzlichen Fragen möchtest du an diesen Datensatz stellen?

```{r}

```

```{r}

```

## Daten kommunizieren

1.  Das Dokument in das HTML-Format umwandeln (Render) und eventuelle Fehler beheben.

2.  Kehre nun zurück zur Kurswebseite und folge den Schritten um deine lokalen Veränderung mit GitHub zu syncronisieren.
